# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

config("capability_config") {
  configs = [ "$ace_root:ace_config" ]

  include_dirs = [
    "//third_party/",
    "//third_party/flutter",
    "//third_party/flutter/engine",
    "//third_party/flutter/skia",
    "//third_party/flutter/engine/flutter/shell/platform/darwin/common/framework/Headers",
    "//third_party/flutter/engine/flutter/shell/platform/darwin/ios/framework/Headers",
    "//third_party/flutter/engine/flutter/shell/common",
    "$ace_root/frameworks",
    "$ace_root",
    "$ace_root/adapter/ios/entrance",
    "$ace_root/adapter/ios/entrance/resource",
    "$ace_root/adapter/ios/capability/texture",
    "$ace_root/adapter/ios/capability/video",
    "$ace_root/adapter/ios/capability/bridge",
    "$ace_root/adapter/ios/capability/bridge/codec",
    "$ace_root/adapter/ios/capability/surface",
    "$ace_root/adapter/ios/stage/ability",
    "$ace_root/adapter/ios/capability/web",
    "//foundation/graphic/graphic_2d/rosen/modules",
    "$ace_root/frameworks/core/components_ng/pattern/web/cross_platform",
  ]

  if (ace_use_new_skia) {
    include_dirs -= [
      "//third_party/flutter",
      "//third_party/flutter/skia",
      "//third_party/flutter/engine/flutter/shell/common",
    ]

    include_dirs += [ "//third_party/skia" ]
  }

  cflags_objc = [
    "-fvisibility=default",
    "-fobjc-weak",
  ]

  cflags_objcc = cflags_objc
}

ohos_source_set("text_input") {
  configs = [ ":capability_config" ]
  sources = [
    "$ace_root/adapter/ios/capability/editing/KeyboardTypeMapper.m",
    "$ace_root/adapter/ios/capability/editing/iOSTxtInputManager.mm",
  ]
}

# build static
template("ace_capability_ios_source_set") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    part_name = ace_engine_part
    defines += invoker.defines

    configs = [
      "$ace_root:ace_config",
      ":capability_config",
    ]

    cflags_objc = [
      "-fvisibility=default",
      "-fobjc-arc",
      "-fobjc-weak",
      "-O0",
    ]

    cflags_objcc = cflags_objc

    sources = [
      # text_input
      "$ace_root/adapter/ios/capability/editing/text_input_client_handler.cpp",
      "$ace_root/adapter/ios/capability/editing/text_input_connection_impl.mm",
      "$ace_root/adapter/ios/capability/editing/text_input_plugin.cpp",

      # clipboard
      "$ace_root/adapter/ios/capability/clipboard/clipboard_impl.mm",
      "$ace_root/adapter/ios/capability/clipboard/clipboard_proxy_impl.cpp",

      # environment
      "$ace_root/adapter/ios/capability/environment/environment_impl.mm",
      "$ace_root/adapter/ios/capability/environment/environment_proxy_impl.cpp",

      # storage
      "$ace_root/adapter/ios/capability/storage/storage_impl.mm",
      "$ace_root/adapter/ios/capability/storage/storage_proxy_impl.cpp",

      # surface
      "$ace_root/adapter/ios/capability/surface/AceSurfacePlugin.mm",
      "$ace_root/adapter/ios/capability/surface/AceSurfaceView.mm",

      # texture
      "$ace_root/adapter/ios/capability/texture/AceTexture.mm",
      "$ace_root/adapter/ios/capability/texture/AceTextureResourcePlugin.mm",

      # vibrator
      "$ace_root/adapter/ios/capability/vibrator/iOSVibratorManager.mm",
      "$ace_root/adapter/ios/capability/vibrator/vibrator_impl.mm",
      "$ace_root/adapter/ios/capability/vibrator/vibrator_proxy_impl.cpp",

      # video
      "$ace_root/adapter/ios/capability/video/AceVideo.mm",
      "$ace_root/adapter/ios/capability/video/AceVideoResourcePlugin.mm",

      # bridge
      "$ace_root/adapter/ios/capability/bridge/BridgeManagerHolder.mm",
      "$ace_root/adapter/ios/capability/bridge/BridgePlugin+jsMessage.mm",
      "$ace_root/adapter/ios/capability/bridge/BridgePlugin.mm",
      "$ace_root/adapter/ios/capability/bridge/BridgePluginManager+internal.mm",
      "$ace_root/adapter/ios/capability/bridge/BridgePluginManager.mm",
      "$ace_root/adapter/ios/capability/bridge/BridgeTaskInfo.mm",
      "$ace_root/adapter/ios/capability/bridge/BridgeTaskQueue.mm",
      "$ace_root/adapter/ios/capability/bridge/BridgeTaskQueueHandler.mm",
      "$ace_root/adapter/ios/capability/bridge/MethodData.mm",
      "$ace_root/adapter/ios/capability/bridge/ResultValue.mm",
      "$ace_root/adapter/ios/capability/bridge/TaskOption.mm",
      "$ace_root/adapter/ios/capability/bridge/bridge_manager.mm",
      "$ace_root/adapter/ios/capability/bridge/codec/BridgeArray.m",
      "$ace_root/adapter/ios/capability/bridge/codec/BridgeBinaryCodec.mm",
      "$ace_root/adapter/ios/capability/bridge/codec/BridgeCodecUtil.h",
      "$ace_root/adapter/ios/capability/bridge/codec/BridgeCodecUtil.mm",
      "$ace_root/adapter/ios/capability/bridge/codec/BridgeJsonCodec.mm",
      "$ace_root/adapter/ios/capability/bridge/codec/BridgeSerializer.mm",

      # web
      "$ace_root/adapter/ios/capability/web/AceWeb.mm",
      "$ace_root/adapter/ios/capability/web/AceWebCallbackObjectWrapper.cpp",
      "$ace_root/adapter/ios/capability/web/AceWebControllerBridge.mm",
      "$ace_root/adapter/ios/capability/web/AceWebErrorReceiveInfoObject.cpp",
      "$ace_root/adapter/ios/capability/web/AceWebObject.cpp",
      "$ace_root/adapter/ios/capability/web/AceWebPatternBridge.cpp",
      "$ace_root/adapter/ios/capability/web/AceWebResourcePlugin.mm",
      "$ace_root/adapter/ios/capability/web/WebMessageChannel.mm",
    ]

    deps = [ ":text_input" ]
    if (defined(config.enable_rosen_backend) && config.enable_rosen_backend) {
      deps += [ "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client_static" ]
    }
    part_name = "ace_engine_cross"
    subsystem_name = "arkui"
  }
}

foreach(item, ace_platforms) {
  platform = item.name
  if (platform == "ios") {
    ace_capability_ios_source_set("ace_capability_ios") {
      defines = []
      config = {
      }

      if (defined(item.config)) {
        config = item.config
      }
      if (defined(config.defines)) {
        defines = config.defines
      }
    }
  }
}
