# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

# build static
template("ace_ios_standard_source_set") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc

    include_dirs = [
      "//third_party/",
      "//commonlibrary/c_utils/base/include",
      "//third_party/flutter/engine",
      "$ace_root/frameworks",
      "$ace_root",
      "$ace_root/adapter/ios/entrance",
      "$ace_root/adapter/ios/entrance/resource",
      "$ace_root/adapter/ios/capability/bridge",
      "$ace_root/adapter/ios/capability/texture",
      "$ace_root/adapter/ios/capability/video",
      "$ace_root/adapter/ios/capability/surface",
      "$ace_root/adapter/ios/capability/web",
      "//foundation/arkui/ace_engine/adapter/ios/stage/ability",
      "//foundation/appframework/window_manager/interfaces/innerkits/wm",
      "//foundation/appframework/window_manager/interfaces/innerkits/dm",
      "//foundation/appframework/window_manager/dm/include",
      "//foundation/appframework/window_manager/utils/include",
    ]

    sources = [
      "AcePlatformPlugin.mm",
      "AceSurfaceHolder.mm",
      "AceTextureHolder.mm",
      "DownloadManager.mm",
      "UINavigationController+StatusBar.mm",
      "WindowView.mm",
      "ace_application_info_impl.cpp",
      "ace_bridge.mm",
      "ace_download_bridge.mm",
      "ace_platform_plugin.cpp",
      "ace_resource_register.cpp",
      "capability_registry.cpp",
      "display_info.mm",
      "download_manager.cpp",
      "foldable_window_ios.cpp",
      "virtual_rs_window.mm",
    ]

    if (target_cpu == "arm64") {
      defines += [ "_ARM64_" ]
    }

    defines += [ "BUILD_FOR_ARKUI" ]

    configs = [
      "$ace_root:ace_config",
      "//foundation/appframework/ability/ability_runtime/cross_platform/interfaces/inner_api/hilog:ability_cross_platform_hilog_config",
    ]

    cflags_objc = [
      "-fvisibility=default",
      "-fobjc-weak",
    ]

    cflags_objcc = cflags_objc

    deps = [
      "$ace_root/adapter/ios/capability:ace_capability_ios",
      "$ace_root/adapter/ios/entrance/resource:resource",
      "$ace_root/frameworks/core/components/theme:build_theme_code",
      "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client_static",
    ]

    frameworks = [
      "UIKit.framework",
      "OpenGLES.framework",
      "QuartzCore.framework",
    ]

    include_dirs += [
      "//third_party/flutter",
      "//third_party/flutter/engine",
      "//third_party/flutter/third_party/skia",
      "//third_party/flutter/engine/flutter/shell/platform/darwin/common/framework/Headers",
      "//third_party/flutter/engine/flutter/shell/platform/darwin/ios/framework/Headers",
      "//third_party/flutter/engine/flutter/shell/common",
      "//base/global/resource_management/interfaces/inner_api/include",
    ]

    if (ace_use_new_skia) {
      deps += [ "$ace_flutter_engine_root:flutter_for_ng" ]
    } else {
      deps += [
        "$ace_flutter_engine_root:third_party_flutter_engine_$platform",
        "$ace_flutter_engine_root/skia:ace_skia_$platform",
      ]
    }

    if (defined(config.enable_rosen_backend) && config.enable_rosen_backend) {
      deps += [ "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client_static" ]
      deps += [ "//foundation/arkui/napi:ace_napi" ]
    }
  }
}

foreach(item, ace_platforms) {
  platform = item.name
  if (platform == "ios") {
    ace_ios_standard_source_set("ace_ios_entrance") {
      if (!ace_use_new_skia) {
        platform = item.name
      }
      defines = []
      cflags_cc = []
      config = {
      }

      if (defined(item.config)) {
        config = item.config
      }

      if (defined(config.defines)) {
        defines = config.defines
      }

      if (defined(config.cflags_cc)) {
        cflags_cc = config.cflags_cc
      }
    }
  }
}
